// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HBRequest struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HBRequest) Reset()         { *m = HBRequest{} }
func (m *HBRequest) String() string { return proto.CompactTextString(m) }
func (*HBRequest) ProtoMessage()    {}
func (*HBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pb_fb5e298dfa49bbfc, []int{0}
}
func (m *HBRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HBRequest.Unmarshal(m, b)
}
func (m *HBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HBRequest.Marshal(b, m, deterministic)
}
func (dst *HBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HBRequest.Merge(dst, src)
}
func (m *HBRequest) XXX_Size() int {
	return xxx_messageInfo_HBRequest.Size(m)
}
func (m *HBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HBRequest proto.InternalMessageInfo

func (m *HBRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type HBReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HBReply) Reset()         { *m = HBReply{} }
func (m *HBReply) String() string { return proto.CompactTextString(m) }
func (*HBReply) ProtoMessage()    {}
func (*HBReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pb_fb5e298dfa49bbfc, []int{1}
}
func (m *HBReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HBReply.Unmarshal(m, b)
}
func (m *HBReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HBReply.Marshal(b, m, deterministic)
}
func (dst *HBReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HBReply.Merge(dst, src)
}
func (m *HBReply) XXX_Size() int {
	return xxx_messageInfo_HBReply.Size(m)
}
func (m *HBReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HBReply.DiscardUnknown(m)
}

var xxx_messageInfo_HBReply proto.InternalMessageInfo

func (m *HBReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HBReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type NFRequest struct {
	Key                  uint32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NFRequest) Reset()         { *m = NFRequest{} }
func (m *NFRequest) String() string { return proto.CompactTextString(m) }
func (*NFRequest) ProtoMessage()    {}
func (*NFRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pb_fb5e298dfa49bbfc, []int{2}
}
func (m *NFRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NFRequest.Unmarshal(m, b)
}
func (m *NFRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NFRequest.Marshal(b, m, deterministic)
}
func (dst *NFRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFRequest.Merge(dst, src)
}
func (m *NFRequest) XXX_Size() int {
	return xxx_messageInfo_NFRequest.Size(m)
}
func (m *NFRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NFRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NFRequest proto.InternalMessageInfo

func (m *NFRequest) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

type NFReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Nodes                []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NFReply) Reset()         { *m = NFReply{} }
func (m *NFReply) String() string { return proto.CompactTextString(m) }
func (*NFReply) ProtoMessage()    {}
func (*NFReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pb_fb5e298dfa49bbfc, []int{3}
}
func (m *NFReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NFReply.Unmarshal(m, b)
}
func (m *NFReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NFReply.Marshal(b, m, deterministic)
}
func (dst *NFReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFReply.Merge(dst, src)
}
func (m *NFReply) XXX_Size() int {
	return xxx_messageInfo_NFReply.Size(m)
}
func (m *NFReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NFReply.DiscardUnknown(m)
}

var xxx_messageInfo_NFReply proto.InternalMessageInfo

func (m *NFReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NFReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *NFReply) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_pb_fb5e298dfa49bbfc, []int{4}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ListReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Nodes                []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReply) Reset()         { *m = ListReply{} }
func (m *ListReply) String() string { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()    {}
func (*ListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pb_fb5e298dfa49bbfc, []int{5}
}
func (m *ListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReply.Unmarshal(m, b)
}
func (m *ListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReply.Marshal(b, m, deterministic)
}
func (dst *ListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReply.Merge(dst, src)
}
func (m *ListReply) XXX_Size() int {
	return xxx_messageInfo_ListReply.Size(m)
}
func (m *ListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListReply proto.InternalMessageInfo

func (m *ListReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ListReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ListReply) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*HBRequest)(nil), "HBRequest")
	proto.RegisterType((*HBReply)(nil), "HBReply")
	proto.RegisterType((*NFRequest)(nil), "NFRequest")
	proto.RegisterType((*NFReply)(nil), "NFReply")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ListReply)(nil), "ListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	Heartbeat(ctx context.Context, in *HBRequest, opts ...grpc.CallOption) (*HBReply, error)
	NodesFind(ctx context.Context, in *NFRequest, opts ...grpc.CallOption) (*NFReply, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Heartbeat(ctx context.Context, in *HBRequest, opts ...grpc.CallOption) (*HBReply, error) {
	out := new(HBReply)
	err := c.cc.Invoke(ctx, "/Router/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) NodesFind(ctx context.Context, in *NFRequest, opts ...grpc.CallOption) (*NFReply, error) {
	out := new(NFReply)
	err := c.cc.Invoke(ctx, "/Router/NodesFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/Router/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	Heartbeat(context.Context, *HBRequest) (*HBReply, error)
	NodesFind(context.Context, *NFRequest) (*NFReply, error)
	List(context.Context, *Empty) (*ListReply, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Router/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Heartbeat(ctx, req.(*HBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_NodesFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).NodesFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Router/NodesFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).NodesFind(ctx, req.(*NFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Router/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Router_Heartbeat_Handler,
		},
		{
			MethodName: "NodesFind",
			Handler:    _Router_NodesFind_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Router_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_pb_fb5e298dfa49bbfc) }

var fileDescriptor_pb_fb5e298dfa49bbfc = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x51, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0xed, 0xda, 0xed, 0x47, 0x06, 0x04, 0x19, 0x44, 0x4a, 0x51, 0x5c, 0xc6, 0x8b, 0xa7, 0x1c,
	0xf4, 0xe0, 0x5d, 0x70, 0xd9, 0x83, 0xae, 0x90, 0x7f, 0xd0, 0xb2, 0x39, 0x2c, 0x6a, 0x13, 0x93,
	0xe9, 0xa1, 0xff, 0x5e, 0x26, 0xd6, 0xde, 0x85, 0xbd, 0xcd, 0x9b, 0xbc, 0xf7, 0x78, 0x79, 0x03,
	0xb5, 0xef, 0xb5, 0x0f, 0x8e, 0x1d, 0xdd, 0x82, 0xda, 0x3d, 0x1b, 0xfb, 0x3d, 0xda, 0xc8, 0x88,
	0xb0, 0x1e, 0xdc, 0xc1, 0x36, 0xab, 0xcd, 0xea, 0x5e, 0x99, 0x34, 0xd3, 0x13, 0x54, 0x42, 0xf0,
	0x9f, 0x13, 0x5e, 0x41, 0x19, 0xb9, 0xe3, 0x31, 0x26, 0x42, 0x61, 0x66, 0x84, 0x97, 0x50, 0xd8,
	0x10, 0x5c, 0x68, 0xce, 0x92, 0xee, 0x17, 0xd0, 0x0d, 0xa8, 0xfd, 0xf6, 0xcf, 0xf9, 0x02, 0xf2,
	0x0f, 0x3b, 0x25, 0xdd, 0xb9, 0x91, 0x91, 0xde, 0xa0, 0x92, 0xe7, 0x7f, 0xfb, 0xca, 0x56, 0x82,
	0xc5, 0x26, 0xdf, 0xe4, 0xb2, 0x4d, 0x80, 0x2a, 0x28, 0x5e, 0xbe, 0x3c, 0x4f, 0xf4, 0x0e, 0xea,
	0xf5, 0x18, 0xf9, 0x64, 0xce, 0x0f, 0x1e, 0x4a, 0xe3, 0x46, 0xb6, 0x01, 0xef, 0x40, 0xed, 0x6c,
	0x17, 0xb8, 0xb7, 0x1d, 0x23, 0xe8, 0xa5, 0xb7, 0xb6, 0xd6, 0x73, 0x45, 0x94, 0x09, 0x69, 0x2f,
	0xba, 0xed, 0x71, 0x38, 0x20, 0xe8, 0xa5, 0x82, 0xb6, 0xd6, 0xf3, 0x7f, 0x29, 0xc3, 0x6b, 0x58,
	0x4b, 0x48, 0x2c, 0x75, 0x0a, 0xdd, 0x82, 0x5e, 0x32, 0x53, 0xd6, 0x97, 0xe9, 0x34, 0x8f, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xce, 0x93, 0xe4, 0x6f, 0xa6, 0x01, 0x00, 0x00,
}
